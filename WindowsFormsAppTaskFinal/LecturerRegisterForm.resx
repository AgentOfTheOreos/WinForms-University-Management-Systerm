<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="pictureBox1.Image" type="System.Drawing.Bitmap, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        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
</value>
  </data>
</root>